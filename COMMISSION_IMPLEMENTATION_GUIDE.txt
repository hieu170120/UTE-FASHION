================================================================================
HƯỚNG DẪN TRIỂN KHAI CHỨC NĂNG QUẢN LÝ CHIẾT KHẤU (COMMISSION MANAGEMENT)
================================================================================

NGÀY: 24/10/2025
NGƯỜI PHÁT TRIỂN: Admin / Hiếu
TRẠNG THÁI: Hoàn tất

================================================================================
1. TỔNG QUAN CHỨC NĂNG
================================================================================

Chức năng "Quản lý chiết khấu" cho phép Admin thiết lập % chiết khấu cho từng 
shop (cửa hàng). Chiết khấu này sẽ được sử dụng trong hệ thống thanh toán và 
báo cáo doanh thu của shop.

QUỀN TRUY CẬP: Chỉ Admin có thể cập nhật chiết khấu cho shop
ENDPOINT API: PUT /admin/shops/{id}/commission

================================================================================
2. CÁC THAY ĐỔI TRONG CƠ SỞ DỮ LIỆU
================================================================================

2.1 Tạo cột mới trong bảng Shops:
   - Tên cột: commission_percentage
   - Kiểu dữ liệu: DECIMAL(5, 2)
   - Giá trị mặc định: 0.00
   - Không được NULL

2.2 Migration file:
   - Đường dẫn: database/migration_add_commission_percentage.sql
   - Nội dung: Thêm cột commission_percentage vào bảng Shops
   - Index: idx_shops_commission_percentage (tùy chọn, để tối ưu truy vấn)

2.3 Thực hiện migration:
   Chạy script sau trên database:
   
   ALTER TABLE Shops
   ADD COLUMN commission_percentage DECIMAL(5, 2) DEFAULT 0.00 NOT NULL;

================================================================================
3. CÁC THAY ĐỔI TRONG BACKEND
================================================================================

3.1 ENTITY - src/main/java/com/example/demo/entity/Shop.java
   - Thêm field: private BigDecimal commissionPercentage
   - Annotation: @Column(name = "commission_percentage", precision = 5, scale = 2)
   - Giá trị mặc định: new BigDecimal("0.00")

3.2 DTO - src/main/java/com/example/demo/dto/ShopDTO.java
   - Thêm field: private BigDecimal commissionPercentage
   - Dùng @Data từ Lombok để tự động generate getter/setter

3.3 DTO - src/main/java/com/example/demo/dto/CommissionRequest.java (ĐỌC)
   - Lớp mới để nhận request từ client
   - Fields: 
     * commissionPercentage: BigDecimal (chiết khấu %)
     * reason: String (lý do thay đổi - tùy chọn)

3.4 SERVICE INTERFACE - src/main/java/com/example/demo/service/ShopService.java
   - Thêm method: ShopDTO updateShopCommission(Integer shopId, BigDecimal commissionPercentage)

3.5 SERVICE IMPL - src/main/java/com/example/demo/service/impl/ShopServiceImpl.java
   - Implement updateShopCommission():
     * Tìm shop theo ID
     * Validate chiết khấu (0-100%)
     * Cập nhật giá trị
     * Lưu vào DB
     * Trả về ShopDTO cập nhật
   - Exception handling:
     * ResourceNotFoundException: Nếu shop không tồn tại
     * IllegalArgumentException: Nếu chiết khấu không hợp lệ

3.6 CONTROLLER - src/main/java/com/example/demo/controller/admin/AdminController.java
   - Endpoint: @PutMapping("/{id}/commission")
   - URL: PUT /admin/shops/{id}/commission
   - Request body: CommissionRequest (JSON)
   - Response: ApiResponse {status, message, data}
   - Xử lý lỗi: Trả về 400 (Bad Request) hoặc 500 (Internal Server Error)

================================================================================
4. CÁC THAY ĐỔI TRONG FRONTEND
================================================================================

4.1 Trang Danh sách Shop - src/main/resources/templates/admin/shops/list.html
   - Thêm cột "Chiết khấu (%)" trong bảng
   - Hiển thị giá trị commission_percentage dạng badge
   - Thêm button "Chiết khấu" để mở modal

4.2 Modal Cập nhật Chiết khấu
   - ID: #commissionModal
   - Fields:
     * Tên Shop (read-only)
     * Chiết khấu (%) - số input, range 0-100, step 0.01
   - Buttons: "Hủy" và "Lưu"

4.3 JavaScript
   - Function openCommissionModal(): Mở modal và điền dữ liệu từ button
   - Function saveCommission(): 
     * Validate dữ liệu
     * Gọi API PUT /admin/shops/{id}/commission
     * Reload trang nếu thành công
     * Hiển thị error message nếu thất bại

================================================================================
5. HƯỚNG DẪN SỬ DỤNG
================================================================================

5.1 Từ giao diện Admin:
   1. Đăng nhập với tài khoản Admin
   2. Vào menu "Quản lý Cửa hàng" → "Danh sách Shop"
   3. Nhấn nút "Chiết khấu" trên hàng của shop cần cập nhật
   4. Nhập % chiết khấu mong muốn (0-100)
   5. Nhấn "Lưu"
   6. Chờ thông báo thành công và trang sẽ reload

5.2 Từ API (curl):
   curl -X PUT http://localhost:8080/admin/shops/1/commission \
     -H "Content-Type: application/json" \
     -d '{"commissionPercentage": 15.50, "reason": "Tăng để khuyến khích"}'

5.3 Từ API (Postman):
   - Method: PUT
   - URL: http://localhost:8080/admin/shops/{id}/commission
   - Header: Content-Type: application/json
   - Body (raw JSON):
     {
       "commissionPercentage": 15.50,
       "reason": "Lý do tùy chọn"
     }

================================================================================
6. VALIDATION & ERROR HANDLING
================================================================================

6.1 Validation Rules:
   - commissionPercentage phải >= 0%
   - commissionPercentage phải <= 100%
   - Shop phải tồn tại

6.2 HTTP Status Code:
   - 200 OK: Cập nhật thành công
   - 400 Bad Request: Chiết khấu không hợp lệ
   - 404 Not Found: Shop không tồn tại (tùy tuỳ)
   - 500 Internal Server Error: Lỗi server

6.3 Response Format:
   Success (200):
   {
     "status": "success",
     "message": "Cập nhật chiết khấu thành công",
     "data": {
       "id": 1,
       "shopName": "Shop A",
       "commissionPercentage": 15.50,
       ...
     }
   }

   Error (400):
   {
     "status": "error",
     "message": "Chiết khấu phải nằm trong khoảng 0-100%",
     "data": null
   }

================================================================================
7. CÁCH SỬ DỤNG CHO DEVELOPERS
================================================================================

7.1 Inject Service:
   @Autowired
   private ShopService shopService;

7.2 Gọi Service:
   BigDecimal commission = new BigDecimal("15.50");
   ShopDTO updatedShop = shopService.updateShopCommission(shopId, commission);

7.3 Xử lý Exception:
   try {
       ShopDTO updatedShop = shopService.updateShopCommission(shopId, commission);
   } catch (ResourceNotFoundException ex) {
       // Shop không tìm thấy
   } catch (IllegalArgumentException ex) {
       // Chiết khấu không hợp lệ
   }

================================================================================
8. TEST CASES
================================================================================

8.1 Test Case 1: Cập nhật chiết khấu hợp lệ
   - Input: shopId=1, commission=15.50
   - Expected: Cập nhật thành công, trả về 200 OK

8.2 Test Case 2: Chiết khấu âm
   - Input: shopId=1, commission=-5.00
   - Expected: Trả về 400 Bad Request

8.3 Test Case 3: Chiết khấu > 100%
   - Input: shopId=1, commission=150.00
   - Expected: Trả về 400 Bad Request

8.4 Test Case 4: Shop không tồn tại
   - Input: shopId=9999, commission=15.50
   - Expected: Trả về 404 hoặc 500

8.5 Test Case 5: Cập nhật thành 0%
   - Input: shopId=1, commission=0.00
   - Expected: Cập nhật thành công

================================================================================
9. CÓ THỂ MỞ RỘNG TRONG TƯƠNG LAI
================================================================================

9.1 Thêm loại chiết khấu khác nhau:
   - Chiết khấu theo danh mục sản phẩm
   - Chiết khấu theo đơn hàng
   - Chiết khấu theo khách hàng

9.2 Lịch sử thay đổi chiết khấu:
   - Bảng CommissionHistory
   - Log ai, khi nào, thay đổi từ bao nhiêu sang bao nhiêu

9.3 Tính toán tự động:
   - Tính chiết khấu dựa trên hiệu suất shop
   - Tự động điều chỉnh theo từng kỳ

9.4 Report & Analytics:
   - Báo cáo chiết khấu hàng tháng
   - So sánh hiệu suất các shop với cùng mức chiết khấu

================================================================================
10. CÁCH SỬ DỤNG CHO DEVELOPERS
================================================================================

7.1 Inject Service:
   @Autowired
   private ShopService shopService;

7.2 Gọi Service:
   BigDecimal commission = new BigDecimal("15.50");
   ShopDTO updatedShop = shopService.updateShopCommission(shopId, commission);

7.3 Xử lý Exception:
   try {
       ShopDTO updatedShop = shopService.updateShopCommission(shopId, commission);
   } catch (ResourceNotFoundException ex) {
       // Shop không tìm thấy
   } catch (IllegalArgumentException ex) {
       // Chiết khấu không hợp lệ
   }

================================================================================
11. CHIẾN LƯỢC ÁP DỤNG CHIẾT KHẤU KHI ĐƠN HÀNG THÀNH CÔNG
================================================================================

PHẦN NÀY CHI TIẾT CÁC BƯỚC TRIỂN KHAI TÍNH TOÁN VÀ LƯU TRỮ CHIẾT KHẤU

📋 TỔNG QUÁT WORKFLOW:
─────────────────────────────────────────────────────────────────────────────

1. KHÁCH HÀNG ĐẶT HÀNG + THANH TOÁN
   ↓
2. HỆ THỐNG TẠO ORDER VỚI TỔNG TIỀN (totalAmount)
   ↓
3. SHIPPER GIAO HÀNG (Status: SHIPPING)
   ↓
4. KHÁCH NHẬN HÀNG ✓ (Status: DELIVERED) ← ĐIỂM KÍCH HOẠT TÍNH CHIẾT KHẤU
   ↓
5. TÍNH TOÁN CHIẾT KHẤU DỰA TRÊN COMMISSION_PERCENTAGE
   ↓
6. LƯU VÀO SHOPANALYTICS & TRỪ TỪ TIỀN SHOP NHẬN
   ↓
7. CẬP NHẬT DASHBOARD CHO ADMIN & SHOP OWNER


📝 IMPLEMENTATION DETAILS - TỪNG BƯỚC CHI TIẾT
═════════════════════════════════════════════════════════════════════════════

BƯỚC 1: ĐIỂM KÍCH HOẠT - PHÁT HIỆN ĐƠN HÀNG DELIVERED
─────────────────────────────────────────────────────

Vị trí: OrderServiceImpl.java - Hàm updateOrderStatus()
Kích hoạt khi: Order chuyển từ SHIPPING → DELIVERED

```java
@Override
@Transactional
public OrderDTO updateOrderStatus(Integer orderId, String newStatus, 
                                  String notes, Integer changedBy) {
    Order order = orderRepository.findById(orderId)
        .orElseThrow(() -> new ResourceNotFoundException("Order not found"));
    
    String oldStatus = order.getOrderStatus();
    
    // Cập nhật trạng thái
    order.setOrderStatus(newStatus);
    order.setDeliveredAt(LocalDateTime.now());
    
    // 🔥 KÍCH HOẠT TÍNH CHIẾT KHẤU KHI DELIVERED
    if ("DELIVERED".equals(newStatus) && 
        !"DELIVERED".equals(oldStatus)) {
        
        // Gọi service tính toán chiết khấu
        dailyAnalyticsService.updateDailyAnalyticsForOrder(order);
        logger.info("✅ Commission calculation triggered for order: {}", orderId);
    }
    
    // ... các xử lý khác ...
    return mapToOrderDTO(order);
}
```

BƯỚC 2: TÍNH TOÁN CHIẾT KHẤU
────────────────────────────

Vị trí: DailyAnalyticsServiceImpl.java - Hàm updateShopAnalytics()
Đã triển khai sẵn! (Xem chi tiết trong mã nguồn)

Công thức:
┌─────────────────────────────────────────────────────────────┐
│ commissionAmount = totalAmount × commissionPercentage / 100 │
│ shopNetRevenue = totalAmount - commissionAmount             │
└─────────────────────────────────────────────────────────────┘

Code logic:
```java
private void updateShopAnalytics(Integer shopId, LocalDate date, Order order) {
    // Tìm hoặc tạo ShopAnalytics cho ngày hôm nay
    ShopAnalytics analytics = findOrCreateShopAnalytics(shopId, date, order);
    
    // Cộng doanh thu
    analytics.setTotalRevenue(
        analytics.getTotalRevenue().add(order.getTotalAmount())
    );
    analytics.setTotalOrders(analytics.getTotalOrders() + 1);
    
    // 🆕 TÍNH CHIẾT KHẤU
    Shop shop = order.getShop();
    if (shop != null && shop.getCommissionPercentage() != null) {
        BigDecimal commissionPercentage = shop.getCommissionPercentage();
        
        // Tính tiền chiết khấu cho đơn hàng này
        BigDecimal commissionAmount = order.getTotalAmount()
            .multiply(commissionPercentage)
            .divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);
        
        // Tính tiền shop thực nhận
        BigDecimal shopNetRevenue = order.getTotalAmount()
            .subtract(commissionAmount);
        
        // Cộng dồn vào ShopAnalytics hôm nay
        analytics.setCommissionPercentage(commissionPercentage);
        analytics.setCommissionAmount(
            (analytics.getCommissionAmount() != null ? 
             analytics.getCommissionAmount() : BigDecimal.ZERO)
            .add(commissionAmount)
        );
        analytics.setShopNetRevenue(
            (analytics.getShopNetRevenue() != null ? 
             analytics.getShopNetRevenue() : BigDecimal.ZERO)
            .add(shopNetRevenue)
        );
    }
    
    shopAnalyticsRepository.save(analytics);
}
```

BƯỚC 3: LƯU CHIẾT KHẤU VÀO DATABASE
──────────────────────────────────

Bảng: ShopAnalytics
Bản ghi lưu những thông tin sau:

┌─────────────────────────────────────┐
│ ShopAnalytics Record                │
├─────────────────────────────────────┤
│ analytics_id:         1001          │
│ shop_id:              1             │
│ period_type:          'DAY'         │
│ period_start:         2025-10-24    │
│ period_end:           2025-10-24    │
│ total_revenue:        400.000 đ     │  ← Doanh thu ghi nhận
│ total_orders:         1             │  ← Số đơn hàng
│ commission_percentage: 10.00%       │  ← Tỷ lệ chiết khấu
│ commission_amount:    40.000 đ      │  ← Tiền chiết khấu
│ shop_net_revenue:     360.000 đ     │  ← Tiền shop nhận
│ growth_percent:       0%            │
│ created_at:           2025-10-24    │
│ updated_at:           2025-10-24    │
└─────────────────────────────────────┘

BƯỚC 4: SỬ DỤNG CHIẾT KHẤU CHO CÁC MỤC ĐÍCH
───────────────────────────────────────────

1. DASHBOARD ADMIN: Xem tiền chiết khấu lấy được
   - Tổng tiền từ tất cả orders
   - Tổng chiết khấu hôm nay
   - Danh sách các shop và chiết khấu từng shop

2. DASHBOARD SHOP OWNER: Xem tiền thực nhận
   - Doanh thu ghi nhận: 400.000 đ
   - Trừ chiết khấu: -40.000 đ
   - Tiền có thể rút: 360.000 đ

3. BÁNG CÁO & ANALYTICS:
   - Tính tốc độ phát triển (growth%)
   - So sánh hiệu suất shop
   - Báo cáo doanh thu theo giai đoạn (DAY, WEEK, MONTH)

4. TÍNH TIỀN RÚT:
   - Tiền rút = ShopNetRevenue - (Số tiền đã rút trước đây)


📊 BẢNG SỬ LÝ TOÀN QUY TRÌNH
═════════════════════════════════════════════════════════════════════════════

Giả sử: Shop A có commission 10%, khách thanh toán 400.000 đ

┌──────────────────────────────────────────────────────────────┐
│ BƯỚC 1: KHÁCH HÀNG THANH TOÁN 400.000 đ                     │
├──────────────────────────────────────────────────────────────┤
│ Order.totalAmount = 400.000 đ ✓                             │
│ Order.status = "PROCESSING"                                 │
│ Chiết khấu chưa tính                                        │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│ BƯỚC 2: KHÁCH NHẬN HÀNG THÀNH CÔNG                          │
├──────────────────────────────────────────────────────────────┤
│ Order.status = "DELIVERED" ✓ ← KÍCH HOẠT TÍNH CHIẾT KHẤU   │
│ Order.deliveredAt = 2025-10-24 14:00:00                     │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│ BƯỚC 3: HỆ THỐNG TÍNH CHIẾT KHẤU                            │
├──────────────────────────────────────────────────────────────┤
│ commissionAmount = 400.000 × 10% / 100 = 40.000 đ           │
│ shopNetRevenue = 400.000 - 40.000 = 360.000 đ               │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│ BƯỚC 4: LƯU VÀO SHOPANALYTICS                               │
├──────────────────────────────────────────────────────────────┤
│ ShopAnalytics.totalRevenue += 400.000 đ                     │
│ ShopAnalytics.commissionAmount += 40.000 đ                  │
│ ShopAnalytics.shopNetRevenue += 360.000 đ                   │
│ ShopAnalytics.totalOrders += 1                              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│ BƯỚC 5: HIỂN THỊ TRÊN DASHBOARD                             │
├──────────────────────────────────────────────────────────────┤
│ ADMIN XEM:                                                   │
│ ├─ Hôm nay Platform lấy: 40.000 đ (từ commission)           │
│ ├─ Shop A doanh thu: 400.000 đ                              │
│ └─ Shop A thực nhận: 360.000 đ                              │
│                                                              │
│ SHOP OWNER XEM:                                              │
│ ├─ Doanh thu ghi nhận: 400.000 đ                            │
│ ├─ Trừ chiết khấu: -40.000 đ                                │
│ └─ Có thể rút: 360.000 đ                                    │
└──────────────────────────────────────────────────────────────┘


🔧 CÁC TRƯỜNG HỢP ĐẶC BIỆT CẦN XỬ LÝ
═════════════════════════════════════════════════════════════════════════════

1. ORDER BỊ HỦY (CANCELLED)
   - Không tính chiết khấu
   - Không cập nhật ShopAnalytics
   - Hoàn tiền cho khách

2. ORDER BỊ TRƯẢ (REFUNDED)
   - Nếu đã tính chiết khấu → Hoàn lại chiết khấu cho shop
   - Cập nhật ShopAnalytics: trừ đi commissionAmount
   - Hoàn toàn bộ tiền cho khách

3. ORDER KHÔNG CÓ SHOP (EDGE CASE)
   - Validate: order.getShop() != null
   - Nếu NULL → Skip tính chiết khấu, log warning

4. SHOP KHÔNG CÓ COMMISSION PERCENTAGE
   - Mặc định = 0.00%
   - Không lấy chiết khấu từ order này
   - ShopNetRevenue = totalAmount (toàn bộ cho shop)

5. NHIỀU ORDER TRONG 1 NGÀY
   - Mỗi order được tính chiết khấu riêng
   - Cộng dồn tất cả vào 1 ShopAnalytics record
   - Không tạo bản ghi riêng cho từng order


✅ CHECKLIST TRIỂN KHAI
═════════════════════════════════════════════════════════════════════════════

Frontend:
  ☑ Hiển thị commission_percentage trên trang quản lý shop (Admin)
  ☑ Thêm modal/form để cập nhật commission
  ☑ Hiển thị chiết khấu trên dashboard shop owner
  ☑ Hiển thị tiền thực nhận (sau trừ chiết khấu) trên dashboard

Backend - Services:
  ☑ ShopService.updateShopCommission() - Cập nhật mức chiết khấu
  ☑ DailyAnalyticsService.updateDailyAnalyticsForOrder() - Tính chiết khấu
  ☑ OrderService.updateOrderStatus() - Kích hoạt tính chiết khấu khi DELIVERED
  ☑ Thêm xử lý hoàn chiết khấu khi refund

Backend - Database:
  ☑ Shops table có commission_percentage
  ☑ ShopAnalytics có commission_percentage, commission_amount, shop_net_revenue
  ☑ Migration scripts tạo các cột mới

Testing:
  ☑ Test tính toán chiết khấu chính xác
  ☑ Test order hủy không tính chiết khấu
  ☑ Test refund hoàn chiết khấu
  ☑ Test multiple orders cumulative calculation
  ☑ Test commission 0% không lấy tiền


📈 CÔNG THỨC TÍNH TOÁN - CHUẨN HÓA
═════════════════════════════════════════════════════════════════════════════

Cho mỗi đơn hàng thành công (DELIVERED):

1. Chiết khấu từ Platform:
   CommissionAmount = TotalAmount × (CommissionPercentage / 100)

2. Tiền Shop nhận:
   ShopNetRevenue = TotalAmount - CommissionAmount

3. Kiểm chứng:
   CommissionAmount + ShopNetRevenue = TotalAmount ✓

Ví dụ thực tế:
   TotalAmount = 1.000.000 đ
   CommissionPercentage = 15%
   
   CommissionAmount = 1.000.000 × (15 / 100) = 150.000 đ
   ShopNetRevenue = 1.000.000 - 150.000 = 850.000 đ
   
   Kiểm chứng: 150.000 + 850.000 = 1.000.000 ✓


================================================================================
12. LIÊN HỆ & HỖ TRỢ
================================================================================

Nếu có bất kỳ câu hỏi hoặc vấn đề, vui lòng liên hệ:
- Hiếu: [admin.hiều]
- Email: [admin-email]
- Slack: #development

================================================================================
