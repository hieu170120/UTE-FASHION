================================================================================
HƯỚNG DẪN SỬ DỤNG CHIẾT KHẤU VÀ CÁCH TÍNH TOÁN KHI CÓ ĐƠN HÀNG THÀNH CÔNG
================================================================================

NGÀY: 24/10/2025
PHIÊN BẢN: 1.0
CHỦ ĐỀ: Commission Management - Quy Trình Tính Toán Chiết Khấu

================================================================================
I. KHÁI NIỆM CHIẾT KHẤU (COMMISSION)
================================================================================

1. Định Nghĩa:
   - Chiết khấu là phí hoa hồng mà nền tảng (Platform) lấy từ mỗi đơn hàng
   - Được tính từ tổng tiền order (totalAmount)
   - Tính bằng phần trăm (%) được cấu hình cho mỗi shop
   - Là doanh thu của platform, không phải của shop

2. Mục Đích:
   - Thu nhập cho nền tảng từ hoạt động kinh doanh của shop
   - Giúp platform tự đi vào
   - Là khoản phí dịch vụ mà shop phải trả để bán hàng trên platform

3. Mô Hình Kinh Tế:
   
   ┌─────────────────┐
   │ KHÁCH HÀNG      │
   │  thanh toán     │
   │ 100.000 đ       │
   └────────┬────────┘
            │
            ↓
   ┌─────────────────────────────────────┐
   │ PLATFORM nhận toàn bộ 100.000 đ     │
   │ (qua Payment Gateway)               │
   └────────┬────────────────────────────┘
            │
            ├─→ Chiết khấu (10%) = 10.000 đ    [PLATFORM GIỮ]
            │
            ├─→ Tiền cho shop = 90.000 đ       [SHOP NHẬN]
            │
            └─→ Ghi nhận doanh thu shop = 100.000 đ [REPORT/ANALYTICS]

================================================================================
II. CÁCH TÍNH TOÁN CHI TIẾT
================================================================================

CÔNG THỨC CƠ BẢN:

┌────────────────────────────────────────────────────────┐
│ Chiết Khấu (Tiền) = Tổng Tiền × Chiết Khấu (%)       │
│                  = totalAmount × commissionPercentage  │
│                      / 100                             │
└────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────┐
│ Tiền Shop Nhận = Tổng Tiền - Chiết Khấu (Tiền)       │
│               = totalAmount - commissionAmount        │
└────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────┐
│ Doanh Thu Ghi Nhận = Tổng Tiền                        │
│                   = totalAmount                       │
│ (Hiển thị cho shop xem doanh thu, nhưng bị trừ        │
│  chiết khấu khi tính tiền thực nhận)                  │
└────────────────────────────────────────────────────────┘

VÍ DỤ TÍNH TOÁN:

┌─ Tổng Tiền (totalAmount):        100.000 đ
├─ Chiết Khấu (%):                 10%
├─ Chiết Khấu (Tiền):              100.000 × 10% = 10.000 đ
├─ Tiền Shop Nhận:                 100.000 - 10.000 = 90.000 đ
├─ Doanh Thu Ghi Nhận:             100.000 đ (công khai)
└─ Doanh Thu Thực Tế:              90.000 đ (sau trừ chiết khấu)

================================================================================
III. QUY TRÌNH XỬ LÝ KHI CÓ ĐƠN HÀNG THÀNH CÔNG
================================================================================

BƯỚC 1: KHÁCH HÀNG ĐẶT HÀNG
─────────────────────────────

Thời gian: T = 10:30 AM

Khách hàng chọn sản phẩm từ Shop A:
  ├─ Áo phông (Tên shop: "Fashion Store A")
  │  ├─ Giá: 50.000 đ
  │  ├─ Số lượng: 1
  │  └─ Thành tiền: 50.000 đ
  │
  ├─ Quần jeans
  │  ├─ Giá: 300.000 đ
  │  ├─ Số lượng: 1
  │  └─ Thành tiền: 300.000 đ
  │
  └─ Chi phí khác:
     ├─ Phí vận chuyển: 50.000 đ
     ├─ Thuế (nếu có): 0 đ
     └─ Giảm giá (coupon): 0 đ

TÍNH TOÁN SUBTOTAL VÀ TOTALAMOUNT:
  
  Subtotal = 50.000 + 300.000 = 350.000 đ
  Shipping Fee = 50.000 đ
  Discount = 0 đ
  Tax = 0 đ
  
  TotalAmount = Subtotal + ShippingFee - Discount + Tax
              = 350.000 + 50.000 - 0 + 0
              = 400.000 đ
              
Khách thanh toán: 400.000 đ ✓

❌ CHIẾT KHẤU CHƯA TÍNH LÚC NÀY
(Chỉ tính khi order Delivered)


BƯỚC 2: ORDER ĐƯỢC TẠO TRONG HỆ THỐNG
──────────────────────────────────────

Dữ liệu Order:
  ├─ OrderID: 12345
  ├─ OrderNumber: "ORD-2025-001234"
  ├─ ShopID: 1
  ├─ Shop: "Fashion Store A"
  ├─ Customer: Khách hàng A
  ├─ OrderDate: 2025-10-24 10:30:00
  ├─ OrderStatus: "Processing" (Đang xử lý)
  ├─ PaymentStatus: "Paid" (Đã thanh toán)
  ├─ Subtotal: 350.000 đ
  ├─ ShippingFee: 50.000 đ
  ├─ DiscountAmount: 0 đ
  ├─ TaxAmount: 0 đ
  └─ TotalAmount: 400.000 đ

Kiểm tra Shop A có chiết khấu không:
  ├─ Shop Commission_Percentage: 10%
  └─ ✓ Có cấu hình chiết khấu 10%


BƯỚC 3: ORDER ĐANG GIAO HÀNG
─────────────────────────────

OrderStatus: "Shipping" (Đang giao)
Shipper xác nhận nhận đơn, giao cho khách hàng...


BƯỚC 4: KHÁCH NHẬN HÀNG THÀNH CÔNG ✓ (ĐÂY LÀ ĐIỂM QUAN TRỌNG!)
──────────────────────────────────────────────────────────────

Thời gian: T = 14:00 (cùng ngày)

OrderStatus: "Delivered" (Hoàn thành)
DeliveredAt: 2025-10-24 14:00:00

🔔 TẠI THỜI ĐIỂM NÀY:
   DailyAnalyticsService.updateDailyAnalytics() được gọi
   
   Hệ thống bắt đầu tính toán CHIẾT KHẤU


BƯỚC 5: HỆ THỐNG TÍNH TOÁN CHIẾT KHẤU
──────────────────────────────────────

Code trong ShopServiceImpl.updateShopCommission() hoặc 
DailyAnalyticsServiceImpl.updateShopAnalytics():

```java
// Lấy thông tin order
Order order = orderRepository.findById(12345);
// Order.TotalAmount = 400.000 đ

// Lấy shop
Shop shop = order.getShop();
// Shop.CommissionPercentage = 10.00 (%)

// TÍNH TOÁN CHIẾT KHẤU
BigDecimal totalAmount = order.getTotalAmount();  // 400.000
BigDecimal commissionPercentage = shop.getCommissionPercentage();  // 10.00
BigDecimal commissionAmount = totalAmount
    .multiply(commissionPercentage)
    .divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);

// commissionAmount = 400.000 × 10 / 100 = 40.000 đ

// Tiền shop thực nhận
BigDecimal shopNetRevenue = totalAmount.subtract(commissionAmount);
// shopNetRevenue = 400.000 - 40.000 = 360.000 đ
```

KẾT QUẢ TÍNH TOÁN:

┌──────────────────────────────────────┐
│ PHÂN CHIA TIỀN HO CHI TIẾT            │
├──────────────────────────────────────┤
│ Tổng Tiền Khách Thanh Toán:  400.000 đ │
├──────────────────────────────────────┤
│ PHÍA PLATFORM:                        │
│ ├─ Chiết Khấu (10%):       40.000 đ  │
│ └─ Subtotal Platform:      40.000 đ  │
├──────────────────────────────────────┤
│ PHÍA SHOP A:                          │
│ ├─ Tiền Bán Hàng:          350.000 đ │
│ ├─ Trừ Chiết Khấu:        -40.000 đ │
│ ├─ Cộng Phí Vận Chuyển:     50.000 đ │
│ └─ Tổng Shop Nhận:         360.000 đ │
├──────────────────────────────────────┤
│ KIỂM CHỨNG:                           │
│ Platform + Shop = 40.000 + 360.000   │
│                = 400.000 đ ✓         │
└──────────────────────────────────────┘


BƯỚC 6: CẬP NHẬT DỮ LIỆU ANALYTICS
──────────────────────────────────

ShopAnalytics record được tạo/cập nhật:

```
ShopAnalytics (New or Updated):
├─ AnalyticsID: 56789
├─ ShopID: 1
├─ PeriodType: "DAY"
├─ PeriodStart: 2025-10-24
├─ PeriodEnd: 2025-10-24
├─ TotalRevenue: 400.000 đ  ← Doanh thu ghi nhận
├─ TotalOrders: 1
├─ CommissionPercentage: 10.00%  ← Tỷ lệ chiết khấu
├─ CommissionAmount: 40.000 đ   ← Tiền chiết khấu
├─ ShopNetRevenue: 360.000 đ    ← Tiền shop thực nhận
└─ GrowthPercent: 0% (đơn đầu tiên)
```

HOẶC nếu đã có record ngày hôm nay:

```
ShopAnalytics (Updated):
├─ TotalRevenue: 800.000 đ  (cộng thêm 400.000 từ order này)
├─ TotalOrders: 2
├─ CommissionAmount: 80.000 đ  (cộng thêm 40.000)
├─ ShopNetRevenue: 720.000 đ   (cộng thêm 360.000)
└─ [các field khác cập nhật]
```


BƯỚC 7: HIỂN THỊ TRÊN DASHBOARD
───────────────────────────────

ADMIN XEM (Admin Dashboard):
┌─────────────────────────────────┐
│ COMMISSION MANAGEMENT           │
├─────────────────────────────────┤
│ Shop ID: 1                      │
│ Shop Name: Fashion Store A      │
│ Commission %: 10%               │
│ Thay đổi chiết khấu    [SỬA]    │
│                                 │
│ Hôm nay (2025-10-24):          │
│ ├─ Doanh thu ghi nhận: 400.000 │
│ ├─ Chiết khấu: 40.000          │
│ └─ Tiền shop nhận: 360.000     │
└─────────────────────────────────┘

SHOP OWNER XEM (Shop Dashboard):
┌─────────────────────────────────┐
│ DASHBOARD SHOP A                │
├─────────────────────────────────┤
│ Hôm nay:                        │
│ Tổng Doanh Thu: 400.000 đ      │
│                                 │
│ Chi Tiết:                       │
│ ├─ Bán hàng: 350.000 đ        │
│ ├─ Phí vận chuyển: 50.000 đ  │
│ ├─ Chiết khấu: -40.000 đ     │
│ └─ Tổng nhận: 360.000 đ      │
│                                 │
│ Tiền có thể rút: 360.000 đ    │
└─────────────────────────────────┘


BƯỚC 8: TÍNH TOÁN TIỀN RÚT CHO SHOP
───────────────────────────────────

Nếu shop muốn rút tiền:

┌────────────────────────────────┐
│ TÍNH TIỀN CÓ THỂ RÚT          │
├────────────────────────────────┤
│ ShopNetRevenue (hôm nay): 360.000 đ
│ Đã rút trước:             0 đ
│ ────────────────────────────
│ CÓ THỂ RÚT:              360.000 đ
└────────────────────────────────┘

Công thức:
  Tiền Có Thể Rút = ShopNetRevenue - (Đã Rút)
                  = 360.000 - 0
                  = 360.000 đ

================================================================================
IV. BẢNG TÓᲛ TẮT - TOÀN BỘ QUYTRÌNH
================================================================================

┌──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬──────────┐
│ Bước     │ Thời Gian│ Status   │ Total    │ Chiết KH │ Tiền Shop│ Net Rev  │
├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
│ 1. Đặt   │ 10:30    │ Processing│ 400.000│ ❌ Chưa │ -        │ -        │
│ 2. Tạo   │ 10:30    │ Processing│ 400.000│ ❌ Chưa │ -        │ -        │
│ 3. Giao  │ 10:45    │ Shipping │ 400.000│ ❌ Chưa │ -        │ -        │
│ 4. Nhận  │ 14:00    │ Delivered│ 400.000│ ✅ 40.000│ -        │ -        │
│ 5. Tính  │ 14:00    │ Delivered│ 400.000│ ✅ 40.000│ -        │ -        │
│ 6. Cập   │ 14:00    │ Delivered│ 400.000│ ✅ 40.000│ 400.000 │ 360.000  │
│ 7. Báo   │ 14:00+   │ Delivered│ 400.000│ ✅ 40.000│ 400.000 │ 360.000  │
│ 8. Rút   │ Bất kỳ   │ Delivered│ 400.000│ ✅ 40.000│ 400.000 │ 360.000  │
└──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┘

================================================================================
V. VÍ DỤ THÊM - NHIỀU ĐƠN HÀNG TRONG 1 NGÀY
================================================================================

NGÀY: 2025-10-24

ĐƠNVANG 1:
  OrderID: 12345
  TotalAmount: 400.000 đ
  Commission (10%): 40.000 đ
  ShopNetRevenue: 360.000 đ

ĐƠNVANG 2:
  OrderID: 12346
  TotalAmount: 250.000 đ
  Commission (10%): 25.000 đ
  ShopNetRevenue: 225.000 đ

ĐƠNVANG 3 (SHOP B với 15% chiết khấu):
  OrderID: 12347
  ShopID: 2
  TotalAmount: 500.000 đ
  Commission (15%): 75.000 đ
  ShopNetRevenue: 425.000 đ

TỔNG HỢP NGÀY 2025-10-24:
┌─────────────────────────────────────┐
│ SHOP A (Commission: 10%)            │
├─────────────────────────────────────┤
│ Tổng Doanh Thu:    650.000 đ       │
│ (Order 1: 400.000 + Order 2: 250.000)
│ Tổng Chiết Khấu:   65.000 đ        │
│ Tổng Net Revenue:  585.000 đ       │
│                                     │
│ PLATFORM NHẬN:     65.000 đ        │
└─────────────────────────────────────┘

┌─────────────────────────────────────┐
│ SHOP B (Commission: 15%)            │
├─────────────────────────────────────┤
│ Tổng Doanh Thu:    500.000 đ       │
│ Tổng Chiết Khấu:   75.000 đ        │
│ Tổng Net Revenue:  425.000 đ       │
│                                     │
│ PLATFORM NHẬN:     75.000 đ        │
└─────────────────────────────────────┘

┌─────────────────────────────────────┐
│ TỔNG PLATFORM (HÔM NAY)            │
├─────────────────────────────────────┤
│ Từ Shop A:         65.000 đ        │
│ Từ Shop B:         75.000 đ        │
│ ────────────────────────────        │
│ TỔNG:              140.000 đ       │
│                                     │
│ Tổng Doanh Thu Toàn Hệ Thống:    │
│ = 650.000 (Shop A) + 500.000 (Shop B)
│ = 1.150.000 đ                      │
└─────────────────────────────────────┘

================================================================================
VI. BẢNG DATABASE - DỮ LIỆU LƯU TRỮ
================================================================================

TABLE: Shops
┌────────────────────────────────────────┐
│ shop_id │ shop_name    │ commission_pct │
├─────────┼──────────────┼────────────────┤
│ 1       │ Fashion A    │ 10.00          │
│ 2       │ Fashion B    │ 15.00          │
│ 3       │ Tech Store   │ 8.50           │
└────────────────────────────────────────┘

TABLE: ShopAnalytics (updated when order delivered)
┌──────────────────────────────────────────────────────┐
│ analytics_id │ shop_id │ period_type │ period_start │
├──────────────┼─────────┼─────────────┼──────────────┤
│ 1001         │ 1       │ DAY         │ 2025-10-24   │
└──────────────┴─────────┴─────────────┴──────────────┘

│ period_end   │ total_revenue │ total_orders │ commission_pct│
├──────────────┼───────────────┼──────────────┼───────────────┤
│ 2025-10-24   │ 650.000       │ 2            │ 10.00         │
└──────────────┴───────────────┴──────────────┴───────────────┘

│ commission_amount │ shop_net_revenue │ growth_percent │
├───────────────────┼──────────────────┼────────────────┤
│ 65.000            │ 585.000          │ 0.0            │
└───────────────────┴──────────────────┴────────────────┘

TABLE: Payments (không thay đổi, vẫn ghi 400.000)
┌──────────────┬──────────┬────────────┬────────────────┐
│ payment_id   │ order_id │ amount     │ payment_status │
├──────────────┼──────────┼────────────┼────────────────┤
│ 5001         │ 12345    │ 400.000    │ Success        │
└──────────────┴──────────┴────────────┴────────────────┘

================================================================================
VII. CODE IMPLEMENTATION - ĐỀ XUẤT
================================================================================

File: src/main/java/com/example/demo/service/impl/DailyAnalyticsServiceImpl.java

Thêm vào hàm updateShopAnalytics():

```java
private void updateShopAnalytics(Integer shopId, LocalDate date, Order order) {
    ShopAnalytics analytics = shopAnalyticsRepository.findAll().stream()
        .filter(a -> a.getShop() != null && a.getShop().getId().equals(shopId))
        .filter(a -> "DAY".equals(a.getPeriodType()))
        .filter(a -> date.equals(a.getPeriodStart()))
        .findFirst()
        .orElseGet(() -> {
            ShopAnalytics newAnalytics = new ShopAnalytics();
            newAnalytics.setShop(order.getShop());
            newAnalytics.setPeriodType("DAY");
            newAnalytics.setPeriodStart(date);
            newAnalytics.setPeriodEnd(date);
            newAnalytics.setTotalRevenue(BigDecimal.ZERO);
            newAnalytics.setTotalOrders(0);
            newAnalytics.setTotalViews(0);
            return newAnalytics;
        });
    
    // Add order revenue
    analytics.setTotalRevenue(analytics.getTotalRevenue().add(order.getTotalAmount()));
    analytics.setTotalOrders(analytics.getTotalOrders() + 1);
    
    // 🆕 TÍNH CHIẾT KHẤU
    Shop shop = order.getShop();
    if (shop != null && shop.getCommissionPercentage() != null) {
        BigDecimal commissionPercentage = shop.getCommissionPercentage();
        
        // Tính tiền chiết khấu
        BigDecimal commissionAmount = order.getTotalAmount()
            .multiply(commissionPercentage)
            .divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);
        
        // Tính tiền shop thực nhận
        BigDecimal shopNetRevenue = order.getTotalAmount()
            .subtract(commissionAmount);
        
        // Lưu vào ShopAnalytics
        analytics.setCommissionPercentage(commissionPercentage);
        analytics.setCommissionAmount(
            (analytics.getCommissionAmount() != null ? 
             analytics.getCommissionAmount() : BigDecimal.ZERO)
            .add(commissionAmount)
        );
        analytics.setShopNetRevenue(
            (analytics.getShopNetRevenue() != null ? 
             analytics.getShopNetRevenue() : BigDecimal.ZERO)
            .add(shopNetRevenue)
        );
    }
    
    shopAnalyticsRepository.save(analytics);
}
```

================================================================================
VIII. CHÚ Ý QUAN TRỌNG
================================================================================

1. ⏰ THỜI ĐIỂM TÍNH CHIẾT KHẤU:
   - KHI NÀO: Order được Delivered (giao thành công)
   - KHÔNG PHẢI: Khi order được tạo hay thanh toán
   - LÝ DO: Phải chắc chắn khách đã nhận hàng mới tính

2. 💰 CHIẾT KHẤU LÀ PHÍA PLATFORM:
   - Tiền này KHÔNG thuộc về shop
   - Shop không thể rút tiền này
   - Nó là doanh thu của nền tảng

3. 📊 ANALYTICS VÀ REPORT:
   - totalRevenue: Ghi nhận công khai (doanh thu sơ bộ)
   - shopNetRevenue: Tiền thực tế shop nhận
   - commissionAmount: Tiền platform lấy

4. 🔄 TÍNH CUMULATIVE:
   - Nếu có nhiều order trong 1 ngày
   - Cộng dồn tất cả chiết khấu vào ShopAnalytics
   - Không tính riêng từng order

5. ✅ VALIDATION:
   - Đảm bảo shop có commission_percentage được cấu hình
   - Nếu không có, mặc định = 0% (không tính chiết khấu)

================================================================================
IX. TÓMLẠI - QUYTRÌNH TẠI MỘT DÒNG
================================================================================

KHÁCH ĐẶT → THANH TOÁN → GIAO HÀNG → KHÁCH NHẬN ✓
                                           ↓
                              TÍNH CHIẾT KHẤU
                                           ↓
                    LƯU VÀO SHOPANALYTICS
                                           ↓
                    HIỂN THỊ TRÊN DASHBOARD
                                           ↓
                    SHOP RÚT TIỀN (TRỪ CHIẾT KHẤU)

================================================================================

================================================================================
X. CÓ THỂ MỞ RỘNG TRONG TƯƠNG LAI
================================================================================

1. ⏰ THỜI ĐIỂM TÍNH CHIẾT KHẤU:
   - KHI NÀO: Order được Delivered (giao thành công)
   - KHÔNG PHẢI: Khi order được tạo hay thanh toán
   - LÝ DO: Phải chắc chắn khách đã nhận hàng mới tính

2. 💰 CHIẾT KHẤU LÀ PHÍA PLATFORM:
   - Tiền này KHÔNG thuộc về shop
   - Shop không thể rút tiền này
   - Nó là doanh thu của nền tảng

3. 📊 ANALYTICS VÀ REPORT:
   - totalRevenue: Ghi nhận công khai (doanh thu sơ bộ)
   - shopNetRevenue: Tiền thực tế shop nhận
   - commissionAmount: Tiền platform lấy

4. 🔄 TÍNH CUMULATIVE:
   - Nếu có nhiều order trong 1 ngày
   - Cộng dồn tất cả chiết khấu vào ShopAnalytics
   - Không tính riêng từng order

5. ✅ VALIDATION:
   - Đảm bảo shop có commission_percentage được cấu hình
   - Nếu không có, mặc định = 0% (không tính chiết khấu)

================================================================================
XI. HƯỚNG DẪN TRIỂN KHAI CHI TIẾT VỀ MÃ NGUỒN
================================================================================

PHẦN NÀY ĐỀ CẬP CÁC FILE VÀ HÀNG CODE CỤ THỂ CẦN CHỈNH SỬA


🔧 FILE 1: OrderServiceImpl.java
═════════════════════════════════════════════════════════════════════════════

VỊ TRÍ: src/main/java/com/example/demo/service/impl/OrderServiceImpl.java

MỤC ĐÍCH: Kích hoạt tính chiết khấu khi order được Delivered

CÓ 2 CÁCH TRIỂN KHAI:

CÁCH 1: Gọi trong hàm updateOrderStatus() (KHUYẾN NGHỊ)
─────────────────────────────────────────────────────

```java
@Service
public class OrderServiceImpl implements OrderService {
    
    @Autowired
    private DailyAnalyticsService dailyAnalyticsService;
    
    @Override
    @Transactional
    public OrderDTO updateOrderStatus(Integer orderId, String newStatus, 
                                      String notes, Integer changedBy) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new ResourceNotFoundException("Order not found: " + orderId));
        
        String oldStatus = order.getOrderStatus();
        
        // Cập nhật thông tin order
        order.setOrderStatus(newStatus);
        if ("DELIVERED".equals(newStatus)) {
            order.setDeliveredAt(LocalDateTime.now());
        }
        
        // Lưu order trước
        orderRepository.save(order);
        
        // 🔥 KÍCH HOẠT TÍNH CHIẾT KHẤU - CHỈ TÍNH KHI CHUYỂN TỪ STATE KHÁC VỀ DELIVERED
        if ("DELIVERED".equals(newStatus) && 
            !"DELIVERED".equals(oldStatus) && 
            order.getShop() != null) {
            
            try {
                logger.info("🟡 [Commission] Calculating commission for order: {}", orderId);
                dailyAnalyticsService.updateDailyAnalyticsForOrder(order);
                logger.info("✅ [Commission] Commission calculation completed for order: {}", orderId);
            } catch (Exception e) {
                logger.error("❌ [Commission] Error calculating commission for order: {}", orderId, e);
                // Không throw exception, cho phép order delivered mặc dù lỗi tính chiết khấu
            }
        }
        
        // Lưu lịch sử thay đổi trạng thái
        OrderStatusHistory history = new OrderStatusHistory();
        history.setOrder(order);
        history.setOldStatus(oldStatus);
        history.setNewStatus(newStatus);
        history.setChangedAt(LocalDateTime.now());
        history.setChangedBy(changedBy != null ? changedBy.toString() : "SYSTEM");
        history.setNotes(notes);
        
        order.getStatusHistory().add(history);
        orderRepository.save(order);
        
        return mapToOrderDTO(order);
    }
}
```

CÁCH 2: Gọi trong hàm completeDelivery() (NẾU CÓ HÀM RIÊNG)
────────────────────────────────────────────────────────────

```java
@Override
@Transactional
public void completeDelivery(Integer orderId) {
    Order order = orderRepository.findById(orderId)
            .orElseThrow(() -> new ResourceNotFoundException("Order not found"));
    
    if (!order.getOrderStatus().equals("SHIPPING")) {
        throw new RuntimeException("Order is not in SHIPPING status");
    }
    
    // Đánh dấu đã giao
    order.setOrderStatus("DELIVERED");
    order.setDeliveredAt(LocalDateTime.now());
    orderRepository.save(order);
    
    // 🔥 TÍNH CHIẾT KHẤU NGAY LẬP TỨC
    if (order.getShop() != null && order.getShop().getCommissionPercentage() != null) {
        try {
            dailyAnalyticsService.updateDailyAnalyticsForOrder(order);
            logger.info("✅ Commission calculated for order: {}", orderId);
        } catch (Exception e) {
            logger.error("Error calculating commission", e);
        }
    }
}
```

LƯỚI KÍCH HOẠT (Trigger Points):
- Khi customer nhấn "Xác nhận nhận hàng"
- Khi shipper đánh dấu giao thành công
- Khi hệ thống auto-complete delivery (hết timeout)


🔧 FILE 2: DailyAnalyticsServiceImpl.java (ĐÃ TRIỂN KHAI HOÀN TOÀN)
═════════════════════════════════════════════════════════════════════════════

VỊ TRÍ: src/main/java/com/example/demo/service/impl/DailyAnalyticsServiceImpl.java

TÌNH TRẠNG: ✅ ĐÃ TRIỂN KHAI XONG - CHỈ CẦN VERIFY

HÀM CHÍNH: updateShopAnalytics(Integer shopId, LocalDate date, Order order)

ĐÃ THỰC HIỆN:
✅ Tìm hoặc tạo ShopAnalytics record cho ngày hôm nay
✅ Cộng doanh thu (totalRevenue)
✅ Tăng số đơn hàng (totalOrders)
✅ Tính chiết khấu dựa trên shop.getCommissionPercentage()
✅ Tính tiền shop nhận (shopNetRevenue)
✅ Cộng dồn các giá trị vào ShopAnalytics
✅ Lưu vào database

CODE ĐÃ CÓ (Lines 82-156):
```java
private void updateShopAnalytics(Integer shopId, LocalDate date, Order order) {
    logger.info("🔵 [DailyAnalytics] updateShopAnalytics - START");
    
    ShopAnalytics analytics = shopAnalyticsRepository.findAll().stream()
        .filter(a -> a.getShop() != null && a.getShop().getId().equals(shopId))
        .filter(a -> "DAY".equals(a.getPeriodType()))
        .filter(a -> date.equals(a.getPeriodStart()))
        .findFirst()
        .orElseGet(() -> {
            ShopAnalytics newAnalytics = new ShopAnalytics();
            newAnalytics.setShop(order.getShop());
            newAnalytics.setPeriodType("DAY");
            newAnalytics.setPeriodStart(date);
            newAnalytics.setPeriodEnd(date);
            newAnalytics.setTotalRevenue(BigDecimal.ZERO);
            newAnalytics.setTotalOrders(0);
            newAnalytics.setTotalViews(0);
            newAnalytics.setCommissionPercentage(BigDecimal.ZERO);
            newAnalytics.setCommissionAmount(BigDecimal.ZERO);
            newAnalytics.setShopNetRevenue(BigDecimal.ZERO);
            return newAnalytics;
        });
    
    // Cộng doanh thu và số đơn hàng
    analytics.setTotalRevenue(analytics.getTotalRevenue().add(order.getTotalAmount()));
    analytics.setTotalOrders(analytics.getTotalOrders() + 1);
    
    // 🆕 TÍNH CHIẾT KHẤU
    Shop shop = order.getShop();
    if (shop != null && shop.getCommissionPercentage() != null) {
        BigDecimal commissionPercentage = shop.getCommissionPercentage();
        
        // Công thức: chiết khấu = tổng tiền × tỷ lệ / 100
        BigDecimal commissionAmount = order.getTotalAmount()
            .multiply(commissionPercentage)
            .divide(new BigDecimal("100"), 2, java.math.RoundingMode.HALF_UP);
        
        // Tiền shop thực nhận
        BigDecimal shopNetRevenue = order.getTotalAmount()
            .subtract(commissionAmount);
        
        // Cộng dồn vào ShopAnalytics
        analytics.setCommissionPercentage(commissionPercentage);
        analytics.setCommissionAmount(
            (analytics.getCommissionAmount() != null ? 
             analytics.getCommissionAmount() : BigDecimal.ZERO)
            .add(commissionAmount)
        );
        analytics.setShopNetRevenue(
            (analytics.getShopNetRevenue() != null ? 
             analytics.getShopNetRevenue() : BigDecimal.ZERO)
            .add(shopNetRevenue)
        );
    }
    
    shopAnalyticsRepository.save(analytics);
    logger.info("✅ [DailyAnalytics] updateShopAnalytics - SUCCESS");
}
```

✨ ĐẶC ĐIỂM ĐÃ CÓ:
- Xử lý NULL check cho shop và commissionPercentage
- Sử dụng HALF_UP rounding mode (chuẩn tính tiền)
- Lấy giá trị cũ của analytics trước khi cộng dồn (không ghi đè)
- Logging chi tiết để debug


🔧 FILE 3: ShopAnalytics.java (ĐÃ CÓ FIELDS)
═════════════════════════════════════════════════════════════════════════════

VỊ TRÍ: src/main/java/com/example/demo/entity/ShopAnalytics.java

TÌNH TRẠNG: ✅ ĐÃ CÓ ĐẦY ĐỦ FIELDS

FIELDS COMMISSION (Lines 49-57):
```java
@Column(name = "commission_percentage", precision = 5, scale = 2)
private BigDecimal commissionPercentage = BigDecimal.ZERO;

@Column(name = "commission_amount", precision = 18, scale = 2)
private BigDecimal commissionAmount = BigDecimal.ZERO;

@Column(name = "shop_net_revenue", precision = 18, scale = 2)
private BigDecimal shopNetRevenue = BigDecimal.ZERO;
```

VALIDATION RULES:
- Precision = 5, Scale = 2 cho commission_percentage (0.00 - 100.00)
- Precision = 18, Scale = 2 cho commission_amount (cho phép số tiền lớn)
- Precision = 18, Scale = 2 cho shop_net_revenue (cho phép số tiền lớn)


🔧 FILE 4: Shop.java (ĐÃ CÓ FIELD)
═════════════════════════════════════════════════════════════════════════════

VỊ TRÍ: src/main/java/com/example/demo/entity/Shop.java

TÌNH TRẠNG: ✅ ĐÃ CÓ FIELD

COMMISSION FIELD (Lines 54-55):
```java
@Column(name = "commission_percentage", precision = 5, scale = 2)
private BigDecimal commissionPercentage = new BigDecimal("0.00");
```

DEFAULT: 0.00% (không tính chiết khấu mặc định)


🔧 FILE 5: Order.java (CÓ RELATIONSHIP ĐẾN SHOP)
═════════════════════════════════════════════════════════════════════════════

VỊ TRÍ: src/main/java/com/example/demo/entity/Order.java

TÌNH TRẠNG: ✅ ĐÃ CÓ RELATIONSHIP

KEY FIELDS:
```java
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "shop_id")
private Shop shop;  // ← Shop của order này

@Column(name = "total_amount", nullable = false, precision = 18, scale = 2)
private BigDecimal totalAmount;  // ← Tổng tiền khách thanh toán

@Column(name = "order_status", nullable = false, length = 50)
private String orderStatus;  // ← Trạng thái order

@Column(name = "delivered_at")
private LocalDateTime deliveredAt;  // ← Thời điểm giao thành công
```

MỌI THỨ CẦN THIẾT ĐÃ CÓ!


📊 DATABASE MIGRATION - KIỂM TRA
═════════════════════════════════════════════════════════════════════════════

CẦN CHẠY NHỮNG SCRIPT NÀY (nếu chưa chạy):

1. Thêm commission_percentage vào bảng Shops:
   ALTER TABLE Shops
   ADD COLUMN commission_percentage DECIMAL(5, 2) DEFAULT 0.00 NOT NULL;

2. Thêm commission fields vào ShopAnalytics:
   ALTER TABLE ShopAnalytics
   ADD COLUMN commission_percentage DECIMAL(5, 2) DEFAULT 0.00 NOT NULL,
   ADD COLUMN commission_amount DECIMAL(18, 2) DEFAULT 0.00 NOT NULL,
   ADD COLUMN shop_net_revenue DECIMAL(18, 2) DEFAULT 0.00 NOT NULL;

KIỂM TRA SAU KHI MIGRATION:
```sql
-- Verify Shops table
DESC Shops;
-- Phải thấy: commission_percentage DECIMAL(5, 2) DEFAULT 0.00

-- Verify ShopAnalytics table
DESC ShopAnalytics;
-- Phải thấy: commission_percentage, commission_amount, shop_net_revenue
```


📋 FLOW TEST - THỬ NGHIỆM CHI TIẾT
═════════════════════════════════════════════════════════════════════════════

TEST CASE 1: Order Delivery Thành Công với Commission 10%
──────────────────────────────────────────────────────────

SETUP:
- Shop ID: 1
- Shop Name: Fashion Store
- Commission: 10%
- Order ID: 101
- Total Amount: 1,000,000 đ

STEPS:
1. Tạo order với totalAmount = 1,000,000
2. Cập nhật order status từ SHIPPING → DELIVERED
3. Hệ thống tự động gọi updateDailyAnalyticsForOrder()

EXPECTED OUTPUT:
ShopAnalytics record hôm nay cho Shop 1:
├─ totalRevenue: 1,000,000
├─ totalOrders: 1
├─ commissionPercentage: 10.00
├─ commissionAmount: 100,000 (1,000,000 × 10 / 100)
└─ shopNetRevenue: 900,000 (1,000,000 - 100,000)

VERIFY:
```sql
SELECT * FROM ShopAnalytics 
WHERE shop_id = 1 AND period_start = CURDATE();
```

Kết quả:
┌─────────┬──────────┬──────────┬──────────┬──────────┬──────────┬────────────────┬────────────────┬─────────────────┐
│ shop_id │ period   │ revenue  │ orders   │ comm_pct │ comm_amt │ shop_net       │ created_at     │ updated_at      │
├─────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────────┼────────────────┼─────────────────┤
│ 1       │ 2025-... │ 1000000  │ 1        │ 10.00    │ 100000   │ 900000         │ 2025-10-24 ... │ 2025-10-24 ...  │
└─────────┴──────────┴──────────┴──────────┴──────────┴──────────┴────────────────┴────────────────┴─────────────────┘

CỘNG CHỈ: ✅ 100,000 + 900,000 = 1,000,000 ✓


TEST CASE 2: Nhiều Order Cùng Ngày - Cumulative Calculation
───────────────────────────────────────────────────────────

SETUP:
- Shop ID: 1, Commission: 10%
- Order 1: 1,000,000 đ → Commission: 100,000
- Order 2: 500,000 đ → Commission: 50,000
- Order 3: 2,000,000 đ → Commission: 200,000

AFTER ALL DELIVERED:
ShopAnalytics should show:
├─ totalRevenue: 3,500,000 (cumulative)
├─ totalOrders: 3 (cumulative)
├─ commissionAmount: 350,000 (cumulative)
└─ shopNetRevenue: 3,150,000 (cumulative)

VERIFY CALCULATION:
- Order 1: 1,000,000 × 10% = 100,000
- Order 2: 500,000 × 10% = 50,000
- Order 3: 2,000,000 × 10% = 200,000
- ────────────────────────────────
- TOTAL: 3,500,000 commission 350,000 ✓


TEST CASE 3: Commission 0% (Không Lấy Chiết Khấu)
─────────────────────────────────────────────────

SETUP:
- Shop ID: 2, Commission: 0%
- Order: 1,000,000 đ

EXPECTED:
- commissionAmount: 0
- shopNetRevenue: 1,000,000 (toàn bộ cho shop)

VERIFY:
```sql
SELECT commission_amount, shop_net_revenue FROM ShopAnalytics
WHERE shop_id = 2 AND period_start = CURDATE();
-- commission_amount: 0.00
-- shop_net_revenue: 1000000.00
```


TEST CASE 4: Shop Không Cấu Hình Commission (NULL)
───────────────────────────────────────────────────

SETUP:
- Shop ID: 3, Commission: NULL hoặc không set

EXPECTED:
- Xử lý NULL check
- Mặc định commission = 0%
- shopNetRevenue = totalAmount (toàn bộ cho shop)

CODE VALIDATION:
```java
if (shop != null && shop.getCommissionPercentage() != null) {
    // Tính chiết khấu
} else {
    // Mặc định commission = 0%
}
```


🐛 DEBUGGING & LOGGING
═════════════════════════════════════════════════════════════════════════════

LOG MESSAGES CẦN KIỂM TRA:

KHI ORDER DELIVERED:
  ✅ "[Commission] Calculating commission for order: 101"
  ✅ "[DailyAnalytics] updateShopAnalytics - START"
  ✅ "[DailyAnalytics] Calculating commission"
  ✅ "[DailyAnalytics] Commission calculated"
  ✅ "[DailyAnalytics] updateShopAnalytics - SUCCESS"

LỖI CẦN CHÚ Ý:
  ❌ "[Commission] Error calculating commission for order"
  ❌ "[DailyAnalytics] Shop or commission percentage is NULL"
  ❌ Division by zero errors

ENABLE DEBUG LOGGING:
```properties
# src/main/resources/application.properties
logging.level.com.example.demo.service.impl.DailyAnalyticsServiceImpl=DEBUG
logging.level.com.example.demo.service.impl.OrderServiceImpl=DEBUG
```


================================================================================
XII. TÓMLẠI - COMMISSION WORKFLOW HOÀN CHỈNH
================================================================================

TRẠNG THÁI TRIỂN KHAI: ✅ HOÀN THÀNH 90%

ĐÃ CÓ:
✅ Database schema (Shops + ShopAnalytics)
✅ Entities (Shop + ShopAnalytics)
✅ Commission calculation logic (DailyAnalyticsService)
✅ Logging & debugging

CẦN KIỂM TRA:
✓ OrderServiceImpl gọi dailyAnalyticsService khi order DELIVERED
✓ Database migration scripts chạy thành công
✓ Test cases chạy qua
✓ Frontend hiển thị commission trên dashboard
✓ Permissions: Chỉ admin có quyền thay đổi commission

BƯỚC TIẾP THEO:
1. Verify tất cả database columns tồn tại
2. Run integration tests
3. Deploy lên production
4. Monitor logs
5. Thêm refund logic nếu cần


================================================================================